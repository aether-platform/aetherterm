# Butterfly Terminal Emulator - Web-based Terminal Application
# ============================================================
#
# ## Application Overview
# Butterfly is a sleek web-based terminal emulator that allows users to access
# command-line interfaces through a web browser. It provides:
# - Real-time terminal sessions via WebSocket/Socket.IO
# - SSL/TLS security with certificate-based authentication
# - Multi-user support with proper session management
# - PTY (pseudo-terminal) integration for native shell experience
# - Theme support and customizable interface
# - Cross-platform compatibility (Linux focus)
#
# ## Architecture
# - **Frontend**: HTML5 + xterm.js terminal emulator + Socket.IO client
# - **Backend**: FastAPI (HTTP) + python-socketio (WebSocket) + uvicorn (ASGI server)
# - **Terminal**: asyncio-based PTY management with os.fork()
# - **Security**: OpenSSL certificates, PAM authentication support
# - **Dependency Injection**: dependency-injector for modular architecture

# ## Documentation
# - document is under docs/ folder
# - under docs folder
#   - technical document is under tech
#   - user manual  is under manual/user
#   - admin document is under manual/admin

# ## Tests
# test scenario is under tests

# Use uv for Python dependency management
uv pip install -e .  # Install in editable mode
uv lock  # Generate uv.lock from pyproject.toml

# Modern Python packaging with pyproject.toml
# - Migrate from setup.py, setup.cfg, requirements.txt to pyproject.toml
# - Use [project.scripts] for console entry points
# - Set requires-python for compatibility
# - Include all metadata in pyproject.toml (version, description, authors, etc.)
# - Use [tool.setuptools.package-data] for non-Python files

# Modern Python web application architecture
# - Use dependency-injector for IoC container pattern
# - Replace tornado with uvicorn + FastAPI + python-socketio
# - Use asyncio for all async operations including pty communication
# - FastAPI for HTTP routes, python-socketio for WebSocket/real-time communication
# - Jinja2 for templating instead of tornado templates

# Socket.IO event handlers should be simple async functions
# Register them with sio.on() rather than using dependency injection decorators

# PTY communication should use asyncio subprocess and streams
# Use os.fork() with asyncio for terminal process management
# Monitor child processes with os.waitpid(pid, os.WNOHANG)

# CLI interface best practices
# - Use Click for command-line interfaces instead of argparse
# - Click provides better option handling, validation, and help generation
# - Use Click decorators for clean option definitions
# - Convert argparse underscores to Click hyphens (--keepalive-interval)

# Dependency injection patterns
# - Create container instance in main function, not as injected parameter
# - Use container.config.from_dict() to configure from CLI options
# - Wire modules after configuration to enable dependency injection
# - CLI values should override default config: config.update(kwargs)

# Entry point configuration
# - Place CLI scripts in package.scripts module (e.g., butterfly.scripts.butterfly)
# - Use [project.scripts] in pyproject.toml for console_scripts
# - Entry points become Linux commands after pip install

# Asyncio Event Loop Management
# - Avoid asyncio.run() inside already running event loops
# - Use uvicorn.Server() instead of uvicorn.run() for programmatic control
# - Create ASGI app factory functions for better testability
# - Handle async server lifecycle properly with await server.serve()

# ## Recent Major Refactoring (2025)
#
# ### Migration from Tornado to Modern Stack
# **Before**: tornado-based monolithic architecture
# **After**: FastAPI + python-socketio + uvicorn modular architecture
#
# ### Key Changes Made:
# 1. **Packaging Modernization**
#    - Migrated setup.py â†’ pyproject.toml
#    - Updated entry points to butterfly.scripts.butterfly:main
#    - Added proper Python version constraints (>=3.8)
#
# 2. **CLI Framework Upgrade**
#    - Replaced argparse with Click
#    - Improved option validation and help generation
#    - Standardized option naming (hyphens vs underscores)
#
# 3. **Async Architecture Overhaul**
#    - Replaced tornado.ioloop with asyncio
#    - Implemented asyncio-based PTY communication
#    - Fixed event loop conflicts with proper uvicorn.Server usage
#
# 4. **Dependency Injection Implementation**
#    - Added ApplicationContainer with dependency-injector
#    - Centralized configuration management
#    - Improved testability and modularity
#
# 5. **Real-time Communication Upgrade**
#    - Migrated from tornado WebSockets to python-socketio
#    - Implemented proper Socket.IO event handling
#    - Added terminal session management via Socket.IO
#
# 6. **Frontend Modernization**
#    - Integrated xterm.js for better terminal emulation
#    - Added Socket.IO client for real-time communication
#    - Responsive terminal interface with proper resize handling
#
# ### Technical Debt Resolved:
# - Fixed regex SyntaxWarnings (raw strings)
# - Eliminated global state variables
# - Proper async/await patterns throughout
# - Modular architecture with clear separation of concerns
#
# ### Deployment:
# ```bash
# uv run butterfly --unsecure --debug  # Development
# uv run butterfly --host 0.0.0.0 --port 8080  # Production
# ```
#
# ### Security Features:
# - SSL/TLS with custom certificate generation
# - Client certificate authentication
# - PAM integration for system authentication
# - Session isolation and user privilege separation

# Python Code Formatting with uv and ruff
# - Use `uv run` to execute development tools
# - Add dev dependencies to [project.optional-dependencies] in pyproject.toml
# - Install dev dependencies with `uv pip install -e ".[dev]"`
# - ruff replaces isort, black, and flake8 with a single fast tool
# - Execute ruff: `uv run ruff check` (linting), `uv run ruff format` (formatting)
# - ruff check --fix (auto-fix issues), ruff format (format code)
