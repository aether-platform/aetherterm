# Ruff configuration file
# https://docs.astral.sh/ruff/

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    "frontend",
]

# Same as Black.
line-length = 100
indent-width = 4

# Assume Python 3.9
target-version = "py39"

[lint]
# Enable pycodestyle (`E`), Pyflakes (`F`), isort (`I`), and more
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
    "ARG",  # flake8-unused-arguments
    "COM",  # flake8-commas
    "DTZ",  # flake8-datetimez
    "EM",   # flake8-errmsg
    "ISC",  # flake8-implicit-str-concat
    "PIE",  # flake8-pie
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "PTH",  # flake8-use-pathlib
    "RUF",  # Ruff-specific rules
]

# Ignore specific rules
ignore = [
    "E501",   # line too long (handled by formatter)
    "E731",   # lambda assignment
    "E402",   # module import not at top of file
    "B008",   # do not perform function calls in argument defaults
    "B904",   # use raise from
    "C901",   # too complex
    "ISC001", # Conflicts with formatter
    "COM812", # Missing trailing comma (handled by formatter)
    "DTZ005", # datetime without timezone
    "PTH",    # use pathlib (too many changes needed)
    "RUF002", # ambiguous unicode character
    "RUF003", # ambiguous unicode character in comment
    "SIM102", # nested if
    "SIM110", # use any
    "TID252", # relative imports
    "UP006",  # deprecated collection types
    "UP035",  # deprecated imports
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[lint.per-file-ignores]
# Ignore specific rules in specific files
"aetherterm/bin/help.py" = ["E501"]
"__init__.py" = ["F401"]
"tests/**/*.py" = ["S101", "ARG", "PLR2004"]

[lint.isort]
known-first-party = ["aetherterm"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]

[lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 15.
max-complexity = 15

[lint.pydocstyle]
convention = "google"

[lint.pylint]
max-args = 7
max-branches = 15

[format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in docstrings.
docstring-code-line-length = "dynamic"