[build-system]
requires = ["setuptools>=61.0.0"] # プロジェクトをビルドするために必要なツール
build-backend = "setuptools.build_meta"

[project]
name = "aetherterm"
version = "0.0.1"
description = "A sleek web based terminal emulator"
readme = "README.md"
requires-python = "==3.12.*"
authors = [
    {name = "Kazushige Takeuchi", email = "kaz@re-x.info"}
]
keywords = ["terminal", "web", "emulator", "websocket"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Terminals"
]

dependencies = [
    "dependency-injector>=2.20.1",
    "python-socketio",
    "uvicorn",
    "fastapi",
    "python-multipart",
    "jinja2",
    "libsass",
    "pyopenssl",
    "click",
    "websockets",
    "toml",
    "aiohttp",
    "pandas>=2.0.0",
    # LangChain関連依存関係
    "langchain>=0.1.0",
    "langchain-openai>=0.1.0",
    "langchain-anthropic>=0.1.0",
    "langchain-community>=0.0.20",
    "chromadb>=0.4.0",
    "faiss-cpu>=1.7.0",
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "psycopg2-binary>=2.9.0",
    "asyncpg>=0.29.0",
    "sentence-transformers>=2.2.0",
    "numpy>=1.24.0",
    "tiktoken>=0.5.0",
    # Steampipe統合用 (PostgreSQL経由)
    "psutil>=5.9.0",
    "boto3>=1.26.0",
    "botocore>=1.29.0",
    "azure-identity>=1.12.0",
    "google-cloud-core>=2.3.0",
    "kubernetes>=24.0.0",
    # OpenTelemetry for APM
    "opentelemetry-api>=1.25.0",
    "opentelemetry-sdk>=1.25.0",
    "opentelemetry-instrumentation>=0.46b0",
    "opentelemetry-instrumentation-fastapi>=0.46b0",
    "opentelemetry-instrumentation-logging>=0.46b0",
    "opentelemetry-instrumentation-sqlalchemy>=0.46b0",
    "opentelemetry-instrumentation-redis>=0.46b0",
    "opentelemetry-instrumentation-aiohttp-client>=0.46b0",
    "opentelemetry-exporter-otlp>=1.25.0",
    "opentelemetry-exporter-otlp-proto-grpc>=1.25.0",
    "opentelemetry-exporter-otlp-proto-http>=1.25.0",
    "tornado>=6.5.1",
    "structlog>=25.4.0",
    # MCP integration
    "supervisor>=4.2.0",
    "mcp>=1.1.0",
]

[project.optional-dependencies]
themes = ["libsass"]
lint = ["pytest", "pytest-flake8", "pytest-isort"]
dev = ["ruff", "pre-commit", "mypy", "pytest", "pytest-cov", "pytest-asyncio"]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.10.0",
    "coverage[toml]>=7.0.0",
]
jupyter = [
    "jupyter-server-proxy>=4.0.0",
    "jupyter>=1.0.0",
    "notebook>=6.4.0",
]

[project.urls]
Homepage = "https://github.com/aether-platform/aetherterm"
Repository = "https://github.com/aether-platform/aetherterm"
Issues = "https://github.com/aether-platform/aetherterm/issues"

[project.scripts]
aetherterm = "aetherterm.scripts.aetherterm:main"
aether = "aetherterm.scripts.aetherterm:main"
aetherterm-agentserver = "aetherterm.agentserver.main:main"
aetherterm-controlserver = "aetherterm.controlserver.main:main"
aetherterm-generate-ssl = "aetherterm.scripts.generate_ssl_certs:main"
aetherterm-ssl-setup = "aetherterm.agentserver.ssl_setup:main"

[tool.setuptools]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
aetherterm = [
    "agentserver/sass/*.sass",
    "agentserver/themes/*.*",
    "agentserver/themes/*/*.*",
    "agentserver/themes/*/*/*.*",
    "agentserver/static/fonts/*",
    "agentserver/static/images/favicon.png",
    "agentserver/static/main.css",
    "agentserver/static/html-sanitizer.js",
    "agentserver/static/*.min.js",
    "agentserver/static/assets/*",
    "agentserver/templates/index.html",
    "agentserver/templates/motd.j2",
    "agentserver/bin/*",
    "agentserver/terminals/*.py",
    "aetherterm.conf.default"
]

[tool.pytest.ini_options]
flake8-ignore = [
    "*.py E731 E402",
    "aetherterm/bin/help.py E501"
]

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
follow_imports = "silent"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_unimported = true

[tool.wheel]
universal = true

[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B108", "B301", "B324", "B701"]

[dependency-groups]
dev = [
    "hypercorn>=0.17.3",
]
