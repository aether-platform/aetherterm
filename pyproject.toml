[build-system]
requires = ["setuptools>=61.0.0"] # プロジェクトをビルドするために必要なツール
build-backend = "setuptools.build_meta"

[project]
name = "aetherterm"
version = "0.0.1"
description = "A sleek web based terminal emulator"
readme = "README.md"
requires-python = ">=3.13"
authors = [
    {name = "Kazushige Takeuchi", email = "kaz@re-x.info"}
]
keywords = ["terminal", "web", "emulator", "websocket"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Terminals"
]

dependencies = [
    # Core Terminal Dependencies
    "dependency-injector>=2.20.1",
    "python-socketio",
    "uvicorn",
    "fastapi",
    "python-multipart",
    "jinja2",
    "libsass",
    "pyopenssl",
    "click",
    "websockets",
    # OpenTelemetry関連依存関係
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "opentelemetry-instrumentation>=0.41b0",
    "opentelemetry-instrumentation-fastapi>=0.41b0",
    "opentelemetry-instrumentation-requests>=0.41b0",
    "opentelemetry-instrumentation-logging>=0.41b0",
    "opentelemetry-exporter-otlp>=1.20.0",
    "opentelemetry-exporter-otlp-proto-http>=1.20.0",
    "opentelemetry-propagator-b3>=1.20.0",
]

[project.optional-dependencies]
themes = ["libsass"]
lint = ["pytest", "pytest-flake8", "pytest-isort"]
dev = ["ruff", "pre-commit", "mypy"]

# AI/ML機能（LangChain + 機械学習）
ai = [
    # LangChain Core
    "langchain>=0.1.0",
    "langchain-openai>=0.1.0",
    "langchain-anthropic>=0.1.0",
    "langchain-community>=0.0.20",
    # Vector Databases
    "chromadb>=0.4.0",
    "faiss-cpu>=1.7.0",
    # Database Support
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "psycopg2-binary>=2.9.0",
    "asyncpg>=0.29.0",
    # ML/NLP Libraries
    "sentence-transformers>=2.2.0",
    "tiktoken>=0.5.0",
]

# データ処理・分析（軽量版）
data = [
    "numpy>=1.24.0",
    "pandas>=2.0.0",
]

# フル機械学習スタック（重い依存関係含む）
ml-full = [
    # AI機能
    "langchain>=0.1.0",
    "langchain-openai>=0.1.0",
    "langchain-anthropic>=0.1.0",
    "langchain-community>=0.0.20",
    "chromadb>=0.4.0",
    "faiss-cpu>=1.7.0",
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "psycopg2-binary>=2.9.0",
    "asyncpg>=0.29.0",
    "sentence-transformers>=2.2.0",
    "tiktoken>=0.5.0",
    # データ処理
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    # 追加ML依存関係
    "scikit-learn>=1.3.0",
    "torch>=2.0.0",
    "transformers>=4.30.0",
    "accelerate>=0.20.0",
]

# ベクターDB専用（ChromaDB + FAISS）
vectordb = [
    "chromadb>=0.4.0",
    "faiss-cpu>=1.7.0",
    "numpy>=1.24.0",
]

# LangChain専用（AIチャット機能のみ）
langchain = [
    "langchain>=0.1.0",
    "langchain-openai>=0.1.0", 
    "langchain-anthropic>=0.1.0",
    "langchain-community>=0.0.20",
    "tiktoken>=0.5.0",
]

# 完全セット（開発・テスト用）
all = [
    # テーマ
    "libsass",
    # AI/ML全機能
    "langchain>=0.1.0",
    "langchain-openai>=0.1.0",
    "langchain-anthropic>=0.1.0",
    "langchain-community>=0.0.20",
    "chromadb>=0.4.0",
    "faiss-cpu>=1.7.0",
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    "psycopg2-binary>=2.9.0",
    "asyncpg>=0.29.0",
    "sentence-transformers>=2.2.0",
    "numpy>=1.24.0",
    "pandas>=2.0.0",
    "tiktoken>=0.5.0",
    "scikit-learn>=1.3.0",
    # 開発ツール
    "ruff",
    "pre-commit",
    "mypy",
    "pytest",
    "pytest-flake8",
    "pytest-isort",
]

[project.urls]
Homepage = "https://github.com/paradoxxxzero/aetherterm"
Repository = "https://github.com/paradoxxxzero/aetherterm"
Issues = "https://github.com/paradoxxxzero/aetherterm/issues"

[project.scripts]
aetherterm = "aetherterm.scripts.aetherterm:main"
aether = "aetherterm.scripts.aetherterm:main"
aetherterm-agentserver = "aetherterm.agentserver.main:main"
aetherterm-agentshell = "aetherterm.agentshell.main:main"
aetherterm-controlserver = "aetherterm.controlserver.main:main"
aetherterm-shell-monitor = "aetherterm.agentshell.pty_monitor.main:main"
aetherterm-dummy-ai = "aetherterm.agentshell.pty_monitor.dummy_ai_server:main"
aetherterm-generate-ssl = "aetherterm.scripts.generate_ssl_certs:main"

[tool.setuptools]

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
aetherterm = [
    "agentserver/sass/*.sass",
    "agentserver/themes/*.*",
    "agentserver/themes/*/*.*",
    "agentserver/themes/*/*/*.*",
    "agentserver/static/fonts/*",
    "agentserver/static/images/favicon.png",
    "agentserver/static/main.css",
    "agentserver/static/html-sanitizer.js",
    "agentserver/static/*.min.js",
    "agentserver/static/assets/*",
    "agentserver/templates/index.html",
    "agentserver/templates/motd.j2",
    "agentserver/bin/*",
    "agentserver/terminals/*.py",
    "aetherterm.conf.default"
]

[tool.pytest.ini_options]
flake8-ignore = [
    "*.py E731 E402",
    "aetherterm/bin/help.py E501"
]

[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "UP",   # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by formatter
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
check_untyped_defs = true
disallow_any_generics = true
disallow_untyped_defs = true
follow_imports = "silent"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_unimported = true

[tool.wheel]
universal = true

[dependency-groups]
dev = [
    "hypercorn>=0.17.3",
]
